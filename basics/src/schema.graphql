# NOTE: The GraphQL API replaces your usual REST API [i.e. the toolset that performs your CRUD operations connecting the client and the server.]
# Type definitions (Application schema).
# This is done in the graphql language.
# ! means that it will always return data and are non-nullible.
# Scalar Types: ID, String, Float, Int, Boolean.

type Query {
        users(query: String): [User!]!
    posts(query: String): [Post!]!
    comments(query: String): [Comment!]!
    me: User!
}

# MUTATIONS is where your basic CRUD operations happen

type Mutation {
    # USER
    createUser(
        userData: CreateUserInput
        ): User!

    updateUser(
        id: ID!
        userData: UpdateUserInput
        ): User!

    deleteUser(
        id: ID!
        ): User!

    # POST
    createPost(
        postData: CreatePostInput
        ): Post!

    updatePost(
        id: ID!
        postData: UpdatePostInput
        ): Post!

    deletePost(
        id: ID!
        ): Post!

    # COMMENT
    createComment(
        commentData: CreateCommentInput
        ): Comment!

    updateComment(
        id: ID!
        commentData: UpdateCommentInput
        ): Comment!

    deleteComment(
        id: ID!
        ): Comment!
}

# INPUTS FOR CREATING AND UPDATING DATA

input CreateUserInput {
    name: String!
    email: String!
    age: Int
}

input UpdateUserInput {
    name: String
    email: String
    age: Int
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    author: ID!
    post: ID!
}

input UpdateCommentInput {
    text: String
}

# DATA TYPES

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

# TO SEE LIVE DATA UPDATES. Subscription will be using web sockets.

type Subscription {
    count: Int!

    comment(
        postId: ID!
        ): CommentSubscriptionPayLoad!

    post: PostSubscriptionPayload!
}

# ENUM
# 1. A special type that defines a set of constraints.
# 2. This type can be used as the type for a field (similar to scalar and custom object types).
# 3. Values for the field must be one of the constants for the type.
# Emums are really good for catching typos.

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

# SUBSCRIPTION TYPES FOR WHEN DATA IS UPDATED

type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type CommentSubscriptionPayLoad {
    mutation: MutationType!
    data: Comment!
}
