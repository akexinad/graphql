# Type definitions (Application schema)
# This is done in the graphql language
# ! means that it will always return data and are non-nullible.
# Scalar Types: ID, String, Float, Int, Boolean
type Query {
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    comments(query: String): [Comment!]!
    me: User!
}

# MUTATION TYPES

type Mutation {
    createUser(
        userData: CreateUserInput
    ): User!

    deleteUser(
        id: ID!
    ): User!

    createPost(
        postData: CreatePostInput
    ): Post!

    deletePost(
        id: ID!
    ): Post!

    createComment(
        commentData: CreateCommentInput
    ): Comment!

    deleteComment(
        id: ID!
    ): Comment!
}

# INPUTS FOR CREATING DATA

input CreateUserInput {
    name: String!,
    email: String!,
    age: Int
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input CreateCommentInput {
    text: String!
    author: ID!
    post: ID!
}

# DATA TYPES

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}
