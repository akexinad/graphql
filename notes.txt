
WHAT IS A GRAPH?
================

- A graph is essentially a visual representation of our models and their relationships.

- TYPES
    - Types are your models/entities.
    - A type has fields that can be tracked.




SETTING UP BABEL
================

- Babel is a JS compiler which allows us to use the latest JS code from ES6.
- Remember when you create a react app? Babel is already installed, but because we're just making a simple node express app, we need to physically install
    babel ourselves so when we use ES6 syntax, babel will compile down to ES5 which is what internet browsers understand.




CREATING A GRAPHQL API
======================

- An important point to note is that graphql is only a specification, not an implementation.
- There the implementation is entirely up to the developer himself.
- Another example of the distinction between between specification and implementation is ECMASCRIPT.
    - ECMASCRIPT is the JS specification. Browser engines like V8 and SpiderMonkey in Chrome and Firefox are
        implementations of those specs.
- GRAPHQL-YOGA is one of these implementations. This implementation provides one of the most advanced feature sets.




GRAPHQL SCALAR TYPES
====================

- A scalar type is just a type that stores a SINGLE value.

- String
- Boolean
- Int
- Float
- Id




CUSTOM TYPES
============

- A custom type is essentially an object made up of a set of fields of scalar types.


NOTE: When querying data within graphql, you need to be specific down to the particular scalar values.




MUTUTATIONS
===========

- The graphql mutation is an operation allows us to create, update and delete data.




THE INPUT TYPE
==============

- Every variable declared in the input can ONLY be a scalar type, you cannot use a custom type.




PRISMA
======

- There are 3 ways to connect our DB to our database:
    - 1. NATIVE DRIVERS: This is a very bare bones implementations that does not include abilities to migrate, validate data or 
            map our models and their relationships and be able to reflect that in our data. This means that we would have to write SQL code
            ourselves to make queries to the database.
    - 2. OBJECT RELATION MAPPING: This implementation is a mix of native drivers along with the nice to have features explained above. Examples of ORM's
            are SQLize and MONGOOSE if you are using an SQL or MONGO database respectvely.

- PRISMA IS ALSO AN ORM THAT IS DATABASE AGNOSTIC. So you can use MySQL, POSTGRESQL and MONGO.

- PRISMA 'wraps up' our DB and exposes it as a GraphQL API.
- Therefore, our NODE.js backend can read and write from the DB with GraphQL.
    - If the server wants to read data, it sends out a GraphQL query, and if it wants to create update or delete data, it sends off a GraphQL mutation, and If
        it wants to watch for updates, it sends off a GraphQL subscription.

- So what does the server do?
    - The server handles small but very important tasks such as USER AUTHENTICATION and DATA AUTHORISATION.




PRISMA WINDOWS SETUP
====================

- First we need to setup a POSTGRESQL database via HEROKU.
- Create a new app via HEROKU.
- Go to the 'overview' tab and click on 'configure add-ons' and search for 'heroku postgres'.
- Choose the free version and click 'provision'
- Click on the new add-on.
- Click on settings > View Credentials
- THESE ARE THE CREDS THAT WE NEED.

- NOW WE CAN INSTALL PGADMIN
    - PGAdmin is a Postgres gui.
    - Open PGAdmin.
    - Go to create server
    - Now use your heroku creds to fill out details in pgAdmin server setup
        - Give it a name
        - Now go to connection and fill out the host, database name, user, and password respectvely.
    - Now start docker and keep it running in the background while we complete the prisma setup.


NOTE
====

- ON WINDOWS ==> you need to change your endpoint in your prisma.yml file from:
    - http://localhost:4466
    - to
    - http://192.168.99.100:4466

- that is, you need to replace 'localhost' with the default machine IP in the docker terminal.




PRISMA NOTES
============

- Whenever you make a change to the datamodel, remember to redeploy the app with 'prisma deploy'.
- The @id is a directive and are fields that are managed by prisma.




PRISMA AND NODE JS
==================

- In order to make queries with prisma via node js, we need two packages:
    - prisma-binding
    - graphql-cli

- Prisma binding hooks up our our schema to our endpoint running in the docker instance.
- In order to create the schema, we need to create a file where the schema gets stored.
    You need to create a graphql.prisma file in the src/generated directory.
- Next is to set up a prisma instance in the prisma.ts file.
- The next step is to use graphql cli to get that schema from prisma for us.
- Once graphql cli has been installed, we create a script in our package json file to fetch that schema for us.
- Once that is done, run the script, and the prisma.graphql file should be populated.
- Now you can start making queries in your prisma.ts file.




CONFIGURING TYPE RELATIONSHIPS
==============================

- When deleting data,  we have 2 options:
    1. SET_NULL
        -This is the default option, basically it only deletes the datum in question and sets
            the field on its related data to null.
        - However, if the field is not nullable, prisma will scream at you.
    2. CASCADE
        -This overrides SET_NULL and deletes the datum in question and all of its related data.
        - This is configured in the data model via directives. You give it a name of your chosing and you tell prisma if you want the delete to be cascade or null
        - NOTE ON NAMING: Each specific relationship should have only one name.
            Ex: The relationship between comment to user in the User type and Comment type should have the same name.




DEPLOYING A NEW PROJECT
=======================

- When deploying a second project, we do not need the docker file as we can have multiple projects in the same container.
- However, what we need to change is the endpoint where our new service will be hosted. Now we will have two schemas in the one db hosted by heroku.



WHY EVEN USE NODE IF PRISMA DOES SO MUCH ?
==========================================

- Node will be taking care of data authorization and sanitization, making sure that no one can just create/mutate whatever they want.




MAKING CHANGES TO MODEL AND SCHEMA
==================================

Remember that whenever you make changes to the prisma data model, you first need to delete the existing data:

- prisma delete 'or' prisma delete -f OR prisma reset 'for newer versions of prisma'.

Then redeploy.

Then generate a new schema by running npm run get-schema. However, if you have already set up the secret, you will get an error.
Adding the prisma property on the prismaconfig file will fix as it will tell prisma where to look for the new datamodel





VALIDATING AUTH TOKENS
======================

In order to add authorization to the GraphQL context, we need to turn the context argument in the graphql server into a function
    so we can pass pass the authorization headers as an argument to the - formerly context object - context function.




DEPLOYMENT OF THE APPLICATION
=============================

There are three things that we need to do in order to deploy our application:

1. A Production DB.
2. A place to host our prisma docker container.
3. A place to host our node.js application.


These requirements will be met via two services:

1. Heroku.
    - Heroku will host our DB, docker container and the application.
2. Prisma Cloud.
    - This will make it easier to manage our heroku-prisma instances.

Both are free which is nice.

When we deploy to prisma cloud, we are going to use a single server and run mulitple services within it.
    - We proved that this is possible when we made a blog and book review service within the same docker container which was running
        a local server on port 4466.




DEPLOYING TO DIFFERENT ENVIRONMENTS
===================================

We need to first create env files in a config directory.

Then when we want to deploy our application, we tell prisma what environment to look with the -e argument and the path to the env file:
    - prisma deploy -e ../config/development.env


To deploy to production, we need prisma to spin up the endpoint for us.
To do so, first we login to prisma via the terminal: 
    - prisma login

Then we tell prisma to use our production.env file despite the fact that it is empty.

It will then ask you which server to which you want to deploy, name and stage.

It will copy the production endpoint to your prisma.yml file, you can paste that endpoint to your production.env file, and uncomment the original line
    that prisma commented for you.